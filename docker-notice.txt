docker container run --publish 80:80 nginx
1. docker find image locally in image cache doesn't find anything.
2. docker find image from docker hub.(autoload the lastest version)
3. started a new container from that image is downloaded
4. Opened port 80 on the host IP
5. routes that traffic to the container IP, port 80

run nginx, mysql, httpd (apache)
run all of them detach -d , name them with --name
nginx should listen on 80:80, httpd on 8080:80, mysql on 3306:3306
when running mysql, use the --env option -e to pass in MYSQL_RANDOM_ROOT_PASSWORD=yes
use docker container logs on mysql to find the random password it created on startup
clean it all up with docker container stop and docker container rm (both can accept multiple names or ID's)
Use docker container ls to ensure everything is correct before  and after cleanup 
docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql
GENERATED ROOT PASSWORD: pheexahv0ciesheelierahmoophieGoo

docker container run -d --name webserver -p 8080:80 httpd
curl localhost:8080
<html><body><h1>It works!</h1></body></html>
docker container run -d --name proxy -p 80:80 nginx
curl localhost
<!DOCTYPE html>
<html>
<head>
<title>Welcome to nginx!</title>
<style>
    body {
        width: 35em;
        margin: 0 auto;
        font-family: Tahoma, Verdana, Arial, sans-serif;
    }
</style>
</head>
<body>
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>
<p>For online documentation and support please refer to
<a href="http://nginx.org/">nginx.org</a>.<br/>
Commercial support is available at
<a href="http://nginx.com/">nginx.com</a>.</p>

<p><em>Thank you for using nginx.</em></p>
</body>
</html>

docker container inspect mysql

Getting a Shell Inside Containers

docker container  run -it --name proxy nginx bash

docker container  exec -it mysql bash

mysql not inclued the ps is there 
so we have to install it

apt-get update && apt-get install -y procps

docker pull alpine
alpine dont have bash but it has shell (sh)
 docker container run -it alpine sh
alpine have apk and we can use apk to install bash for sure
docker network: concepts

docker container port <container>

docker network default
each container connected to a private virtual network "bridge" (VPN)
each virtual network routes through NAT firewall on host IP
all container on a virtual network con talk to each other without -p
Best practice is to create a new virtual network for each app:
network "my_web_app" for mysql and php /apache containers
network "my_api" for mongo and nodejs container
"Batteries Included, but Removable"
make new virtual networks
attach containers to more then one virtual network (or none)
skip virtual networks and use host IP (--net=host)
Use different Docker networks drivers to gain new abilities

and a lot of tools intergrate with docker to extend those abilities

-p (HOST:CONTANER format) --publish


docker container inspect --format '{{ .NetworkSettings.IPAddress }}' webhost 
study in chapter 28
issue updated in nginx

docker container run <stuff> nginx (replace nginx:alpine

Docker network : CLI Management

show networks: docker network ls
Inspect a network:  docker network inspect <network id or network name>
Create a network: docker network create <name of network> (new subnet)
connect a container to a new network: this will add a container to a new network
disconnect a container from a new network: this will remove a container from a new network
attach network to a container: 
Detach a network from a container:

demo
we have a nginx server had run on network my_app_net with name my_nginx
now we run another nginx server with name new_nginx in the my_app_net network too

docker container run -d --name new_nginx --network my_app_net  nginx

If the version in nginx server dont have ping package we should access to nginx server via bash shell to install ping package by the command below:

docker container exec -it new_nginx bash

and then you can run the command to install the package here:

apt-get update && apt-get install iputils-ping

now we run the command ping to test the connection from new_nginx to my_nginx container together in my_app_net:

docker container exec -it new_nginx ping my_nginx

and you test it again

docker container exec -it my_nginx ping new_nginx 

Assignment

curl command
use -it on ubuntu and centos 
docker container -rm to save cleanup
if the ubuntu doesnt have curl you can run this cmd:

apt-get update && apt-get install curl

centos

yum update curl

curl --version
study at course 31

docker container run --rm -it centos:7 bash

yum update curl

docker container run --rm -it ubuntu:14.04 bash

check curl version
curl --version
centos:7 curl 7.29.0

in ubuntu
apt-get update && apt-get install curl

then check curl version 
curl 7.35.0

DNS Round Robin

Elasticsearch : 
Feature:
Scalable 
real-time 
Highly available
Developer-friendly
Versatile storage
Query & aggregations

study course 34

course 35
round robin Test

create network

docker network create dude

then create 2 containers for elasticsearch in the "dude" network with the DNS name "search" (in every system using this kind of DNS it have lot of Ips with behind the "search" DNS name like google has use this kind of DNS ) 

for example here:
we have dns : search.com with a lot of ips behind this dns 172.1.0.2 .3 .4 etc

docker container  run -d --net dude  --net-alias search elasticsearch:2

docker container  run -d --net dude  --net-alias search elasticsearch:2

run a os to test the dns name with alpine:3.10 dont use the latest alpine it have issue in nslookup package
or you can use ubuntu or centos

docker container run --rm -d --net dude alpine:3.10 nslookup search.

To test the network (if those container in the same network (NETID))

Now our 2 datastore or online now on our dude network so now you can test it service Restful with create a centos or other kind of OS with curl package to test the services

docker container run --rm --net dude centos curl -s search:9200

course 36
Container Image: where to find them and how to build them


